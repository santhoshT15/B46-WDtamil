1.Write a blog on difference between HTTP1.1 vs HTTP2?


  The first usable version of HTTP was created in 1997. Because it went through several stages of development, first version of HTTP was called HTTP/1.1. 
  This version is still in use on the web. 
  In 2015, a new version of HTTP called HTTP/2 was created.

  HTTP/2 solves several problems that the creators of HTTP/1.1 did not anticipate.
  In particular, HTTP/2 is much faster and more efficient than HTTP/1.1.
  One of the ways in which HTTP/2 is faster is in how it prioritizes content during the loading process.

 PRIORITIZATION :
  In HTTP2, develops have hands-on, detailed control over prioritization.
  This allows them to maximize perceived and actual page load speed to a degree that was not 
 possible in HTTP 1.1.
 
 MULTIPLEXING :
  HTTP1.1 loads resources one after the other, so if one resource cannot be loaded, it bloacks all
 the other resources behind it.
   In contrast, HTTPS 2 is able to use a single TCP connection to send multiple streams of data at once 
 so that no one resource blocks any other resourse.
 
 SERVER PUSH :
   HTTP/2 solves this problem by allowing a server to "push" content to a client before 
 the client asks for it.
  The server also sends a message letting the client know what pushed content to expect â€“ like 
  if Bob had sent Alice a Table of Contents of his novel before sending the whole thing.
  
  HEADER COMPRESSION :
   To speed up web performance, both HTTP/1.1 and HTTP/2 compress HTTP messages to make them smaller.
   HTTP/2 uses a more advanced compression method called HPACK that eliminates redundant information 
  in HTTP header packets. 
  This eliminates a few bytes from every HTTP packet. Given the volume of HTTP packets involved in
  oading even a single webpage, those bytes add up quickly, resulting in faster loading.
  
  
2.Write a blog about objects and its internal representation in Javascript?

The most significant data type in JavaScript is an object, which serves as the foundation for contemporary JavaScript.
While the primitive data types in JavaScript (Number, String, Boolean, null, undefined, and symbol) all store a single value each, 
these objects store multiple values (depending on their types).
 
 Each object may contain any combination of these primitive data-types and refrence data type, and
 object are more complex. An object is a type of refrence data.
 A refrence or a pointer to the refrence value is given to  variable that have received it.
 The Object's storage location in memory is indicated by the refrence or pointer in question. 
 The values are not actually kept in variables.
 
 A loose definition of an object in javascript is a collection of related data that is not ordered
 and is represented by "key:value" pairs o primitive or refrence types.
 In the context of an object, these keys, which can be variables or functions, are referred to
 as properties and methods.
 



